document.addEventListener('firebaseInitialized', function() {
    const db = firebase.database();

    function roundToNearestMinute(dateTime, minutes = 1) {
        const ms = 1000 * 60 * minutes; // convert minutes to milliseconds
        return new Date(Math.round(new Date(dateTime).getTime() / ms) * ms).toISOString();
    }

    async function removeDuplicates() {
        const salesOutcomesRef = db.ref('salesOutcomes');
        const snapshot = await salesOutcomesRef.once('value');
        const salesOutcomes = snapshot.val();

        if (!salesOutcomes) {
            console.log('No sales outcomes found.');
            return;
        }

        const uniqueEntries = new Set();
        const duplicateKeys = [];

        for (const [key, outcome] of Object.entries(salesOutcomes)) {
            const roundedOutcomeTime = roundToNearestMinute(outcome.outcomeTime, 1);
            const uniqueIdentifier = `${outcome.accountNumber}-${outcome.assignAction}-${roundedOutcomeTime}-${outcome.userId}`;
            if (uniqueEntries.has(uniqueIdentifier)) {
                duplicateKeys.push(key);
            } else {
                uniqueEntries.add(uniqueIdentifier);
            }
        }

        const promises = duplicateKeys.map(key => salesOutcomesRef.child(key).remove());

        try {
            await Promise.all(promises);
            console.log(`Removed ${duplicateKeys.length} duplicate entries.`);
        } catch (error) {
            console.error('Error removing duplicates:', error);
        }
    }

    removeDuplicates().then(() => {
        console.log('Duplicate removal process completed.');
    }).catch(error => {
        console.error('Error:', error);
    });
});